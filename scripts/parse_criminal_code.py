# scripts/parse_criminal_code.py
# –ü–∞—Ä—Å–µ—Ä PDF –ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏ –¥–ª—è SudPraktika

import PyPDF2
import re
import os
import yaml
from datetime import datetime

class CriminalCodeParser:
    def __init__(self, pdf_path):
        self.pdf_path = pdf_path
        self.articles = []
        self.sections = []
        
    def extract_text_from_pdf(self):
        """–í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –∑ PDF —Ñ–∞–π–ª—É"""
        try:
            with open(self.pdf_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                text = ""
                
                print(f"–û–±—Ä–æ–±–∫–∞ PDF: {len(reader.pages)} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
                
                for i, page in enumerate(reader.pages):
                    page_text = page.extract_text()
                    text += page_text + "\n"
                    
                    if i % 50 == 0:
                        print(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {i} —Å—Ç–æ—Ä—ñ–Ω–æ–∫...")
                
                return text
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è PDF: {e}")
            return None
    
    def parse_structure(self, text):
        """–ü–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ö–ö"""
        
        # –û—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'[\u00A0\u2000-\u200B\u2028\u2029]', ' ', text)
        
        # –®—É–∫–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏
        section_pattern = r'–†–û–ó–î–Ü–õ\s+([IVX]+)\.?\s*([–ê-–Ø–Ü–á–Ñ“ê][^–ê-–Ø]*?)(?=–†–û–ó–î–Ü–õ|$)'
        sections = re.findall(section_pattern, text, re.DOTALL | re.IGNORECASE)
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤: {len(sections)}")
        for i, (num, title) in enumerate(sections[:5]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            print(f"  {num}: {title[:50]}...")
        
        # –®—É–∫–∞—î–º–æ —Å—Ç–∞—Ç—Ç—ñ - —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏
        article_patterns = [
            r'–°—Ç–∞—Ç—Ç—è\s+(\d+)\.?\s*([–ê-–Ø–Ü–á–Ñ“ê][^\.]*?)\.?\s*(.*?)(?=–°—Ç–∞—Ç—Ç—è\s+\d+|$)',
            r'(\d+)\.?\s*([–ê-–Ø–Ü–á–Ñ“ê][^\.]*?)\.?\s*(.*?)(?=\d+\.\s*[–ê-–Ø–Ü–á–Ñ“ê]|$)',
        ]
        
        articles = []
        
        for pattern in article_patterns:
            matches = re.findall(pattern, text, re.DOTALL | re.IGNORECASE)
            if matches:
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º")
                articles.extend(matches)
                break
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
        processed_articles = []
        for match in articles:
            if len(match) >= 3:
                number, title, content = match[0], match[1], match[2]
                
                try:
                    article_num = int(number)
                    
                    # –û—á–∏—â—É—î–º–æ –Ω–∞–∑–≤—É —Å—Ç–∞—Ç—Ç—ñ
                    title = re.sub(r'^\W+|\W+$', '', title)
                    title = re.sub(r'\s+', ' ', title)
                    
                    # –û—á–∏—â—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
                    content = re.sub(r'\s+', ' ', content).strip()
                    
                    # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
                    if len(content) > 2000:
                        content = content[:2000] + "..."
                    
                    processed_articles.append({
                        'number': article_num,
                        'title': title,
                        'content': content,
                        'slug': self.create_slug(title)
                    })
                    
                except ValueError:
                    continue
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å—Ç–∞—Ç—Ç—ñ
        processed_articles.sort(key=lambda x: x['number'])
        
        print(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {len(processed_articles)} —Å—Ç–∞—Ç–µ–π")
        if processed_articles:
            print("–ü–µ—Ä—à—ñ 3 —Å—Ç–∞—Ç—Ç—ñ:")
            for article in processed_articles[:3]:
                print(f"  {article['number']}: {article['title']}")
        
        return processed_articles, sections
    
    def create_slug(self, title):
        """–°—Ç–≤–æ—Ä—é—î slug –¥–ª—è URL"""
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó
        translit = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '“ë': 'g', '–¥': 'd', '–µ': 'e', 
            '—î': 'ye', '–∂': 'zh', '–∑': 'z', '–∏': 'y', '—ñ': 'i', '—ó': 'yi', '–π': 'y',
            '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r',
            '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch',
            '—à': 'sh', '—â': 'sch', '—å': '', '—é': 'yu', '—è': 'ya'
        }
        
        slug = title.lower()
        for ua, en in translit.items():
            slug = slug.replace(ua, en)
        
        # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏
        slug = re.sub(r'[^a-z0-9\s-]', '', slug)
        slug = re.sub(r'\s+', '-', slug)
        slug = re.sub(r'-+', '-', slug)
        
        return slug.strip('-')[:50]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
    
    def create_jekyll_files(self, articles):
        """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª–∏ –¥–ª—è Jekyll"""
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        os.makedirs('_articles', exist_ok=True)
        os.makedirs('_data', exist_ok=True)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ç–µ–π
        created_files = []
        
        for article in articles:
            filename = f"_articles/{article['number']:03d}-{article['slug']}.md"
            
            # YAML Front Matter
            front_matter = {
                'title': f"–°—Ç–∞—Ç—Ç—è {article['number']}. {article['title']}",
                'number': article['number'],
                'slug': article['slug'],
                'layout': 'article'
            }
            
            content = f"""---
{yaml.dump(front_matter, allow_unicode=True, default_flow_style=False)}---

# –°—Ç–∞—Ç—Ç—è {article['number']}. {article['title']}

{article['content']}

## –ü—Ä–∞–∫—Ç–∏–∫–∞ –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°—É–¥—É

<div class="decisions-container">
{{% for decision in site.decisions %}}
  {{% if decision.article_numbers contains {article['number']} %}}
    <div class="decision-item">
      <h4><a href="{{{{ decision.url }}}}">{{{{ decision.title }}}}</a></h4>
      <p class="decision-date">{{{{ decision.date | date: "%d.%m.%Y" }}}}</p>
      <p class="decision-excerpt">{{{{ decision.content | strip_html | truncate: 200 }}}}</p>
    </div>
  {{% endif %}}
{{% endfor %}}
</div>

<div class="article-navigation">
  {{% assign prev_article = site.articles | where: "number", {article['number'] - 1} | first %}}
  {{% assign next_article = site.articles | where: "number", {article['number'] + 1} | first %}}
  
  {{% if prev_article %}}
    <a href="{{{{ prev_article.url }}}}" class="prev-article">‚Üê –°—Ç–∞—Ç—Ç—è {{{{ prev_article.number }}}}</a>
  {{% endif %}}
  
  {{% if next_article %}}
    <a href="{{{{ next_article.url }}}}" class="next-article">–°—Ç–∞—Ç—Ç—è {{{{ next_article.number }}}} ‚Üí</a>
  {{% endif %}}
</div>
"""
            
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                created_files.append(filename)
                
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É {filename}: {e}")
        
        print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ {len(created_files)} —Ñ–∞–π–ª—ñ–≤ —Å—Ç–∞—Ç–µ–π")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–Ω–∏–π —Ñ–∞–π–ª –∑ —É—Å—ñ–º–∞ —Å—Ç–∞—Ç—Ç—è–º–∏
        self.create_index_data(articles)
        
        return created_files
    
    def create_index_data(self, articles):
        """–°—Ç–≤–æ—Ä—é—î –¥–∞–Ω—ñ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        
        # –ì—Ä—É–ø—É—î–º–æ —Å—Ç–∞—Ç—Ç—ñ –∑–∞ —Ä–æ–∑–¥—ñ–ª–∞–º–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
        sections_data = {
            'zagalna': {'title': '–ó–∞–≥–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞', 'range': (1, 108), 'articles': []},
            'osoblyva': {'title': '–û—Å–æ–±–ª–∏–≤–∞ —á–∞—Å—Ç–∏–Ω–∞', 'range': (109, 447), 'articles': []}
        }
        
        for article in articles:
            if 1 <= article['number'] <= 108:
                sections_data['zagalna']['articles'].append(article)
            else:
                sections_data['osoblyva']['articles'].append(article)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ YAML —Ñ–∞–π–ª
        with open('_data/criminal_code.yml', 'w', encoding='utf-8') as f:
            yaml.dump(sections_data, f, allow_unicode=True, default_flow_style=False)
        
        print("–°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª _data/criminal_code.yml")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –¥–ª—è SudPraktika")
        print("=" * 60)
        
        # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
        print("üìñ –ß–∏—Ç–∞–Ω–Ω—è PDF —Ñ–∞–π–ª—É...")
        text = self.extract_text_from_pdf()
        
        if not text:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ PDF —Ñ–∞–π–ª")
            return False
        
        print(f"‚úÖ –í–∏—Ç—è–≥–Ω—É—Ç–æ {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–µ–∫—Å—Ç—É")
        
        # –ü–∞—Ä—Å–∏–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüîç –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...")
        articles, sections = self.parse_structure(text)
        
        if not articles:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ")
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª–∏ Jekyll
        print(f"\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è {len(articles)} —Ñ–∞–π–ª—ñ–≤...")
        created_files = self.create_jekyll_files(articles)
        
        print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç–µ–π –æ–±—Ä–æ–±–ª–µ–Ω–æ: {len(articles)}")
        print(f"   ‚Ä¢ –§–∞–π–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {len(created_files)}")
        print(f"   ‚Ä¢ –î—ñ–∞–ø–∞–∑–æ–Ω —Å—Ç–∞—Ç–µ–π: {min(a['number'] for a in articles)} - {max(a['number'] for a in articles)}")
        
        return True

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ PDF —Ñ–∞–π–ª—É
    pdf_path = "criminal_code.pdf"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö
    
    if not os.path.exists(pdf_path):
        print(f"‚ùå –§–∞–π–ª {pdf_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("–ü–æ–∫–ª–∞–¥—ñ—Ç—å PDF —Ñ–∞–π–ª –ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –≤ –ø–∞–ø–∫—É scripts/ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö")
    else:
        parser = CriminalCodeParser(pdf_path)
        parser.run()
